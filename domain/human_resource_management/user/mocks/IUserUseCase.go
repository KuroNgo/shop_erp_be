// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	mongo "go.mongodb.org/mongo-driver/mongo"

	user_domain "shop_erp_mono/domain/human_resource_management/user"
)

// IUserUseCase is an autogenerated mock type for the IUserUseCase type
type IUserUseCase struct {
	mock.Mock
}

// CheckVerify provides a mock function with given fields: ctx, verificationCode
func (_m *IUserUseCase) CheckVerify(ctx context.Context, verificationCode string) bool {
	ret := _m.Called(ctx, verificationCode)

	if len(ret) == 0 {
		panic("no return value specified for CheckVerify")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, verificationCode)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Create provides a mock function with given fields: ctx, user
func (_m *IUserUseCase) Create(ctx context.Context, user *user_domain.SignUp) error {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *user_domain.SignUp) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, userID
func (_m *IUserUseCase) Delete(ctx context.Context, userID string) error {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FetchMany provides a mock function with given fields: ctx
func (_m *IUserUseCase) FetchMany(ctx context.Context) (user_domain.Response, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for FetchMany")
	}

	var r0 user_domain.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (user_domain.Response, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) user_domain.Response); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(user_domain.Response)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByEmail provides a mock function with given fields: ctx, email
func (_m *IUserUseCase) GetByEmail(ctx context.Context, email string) (*user_domain.User, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for GetByEmail")
	}

	var r0 *user_domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*user_domain.User, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *user_domain.User); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user_domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *IUserUseCase) GetByID(ctx context.Context, id string) (*user_domain.User, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *user_domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*user_domain.User, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *user_domain.User); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user_domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByVerificationCode provides a mock function with given fields: ctx, verificationCode
func (_m *IUserUseCase) GetByVerificationCode(ctx context.Context, verificationCode string) (*user_domain.User, error) {
	ret := _m.Called(ctx, verificationCode)

	if len(ret) == 0 {
		panic("no return value specified for GetByVerificationCode")
	}

	var r0 *user_domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*user_domain.User, error)); ok {
		return rf(ctx, verificationCode)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *user_domain.User); ok {
		r0 = rf(ctx, verificationCode)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user_domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, verificationCode)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: ctx, request
func (_m *IUserUseCase) Login(ctx context.Context, request user_domain.SignIn) (*user_domain.User, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 *user_domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, user_domain.SignIn) (*user_domain.User, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, user_domain.SignIn) *user_domain.User); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user_domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, user_domain.SignIn) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UniqueVerificationCode provides a mock function with given fields: ctx, verificationCode
func (_m *IUserUseCase) UniqueVerificationCode(ctx context.Context, verificationCode string) bool {
	ret := _m.Called(ctx, verificationCode)

	if len(ret) == 0 {
		panic("no return value specified for UniqueVerificationCode")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, verificationCode)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, user
func (_m *IUserUseCase) Update(ctx context.Context, user *user_domain.UpdateUser) error {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *user_domain.UpdateUser) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateImage provides a mock function with given fields: ctx, userID, imageURL
func (_m *IUserUseCase) UpdateImage(ctx context.Context, userID string, imageURL string) error {
	ret := _m.Called(ctx, userID, imageURL)

	if len(ret) == 0 {
		panic("no return value specified for UpdateImage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, userID, imageURL)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdatePassword provides a mock function with given fields: ctx, user
func (_m *IUserUseCase) UpdatePassword(ctx context.Context, user *user_domain.User) error {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePassword")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *user_domain.User) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateVerify provides a mock function with given fields: ctx, user
func (_m *IUserUseCase) UpdateVerify(ctx context.Context, user *user_domain.User) (*mongo.UpdateResult, error) {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for UpdateVerify")
	}

	var r0 *mongo.UpdateResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *user_domain.User) (*mongo.UpdateResult, error)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *user_domain.User) *mongo.UpdateResult); ok {
		r0 = rf(ctx, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.UpdateResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *user_domain.User) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateVerifyForChangePassword provides a mock function with given fields: ctx, user
func (_m *IUserUseCase) UpdateVerifyForChangePassword(ctx context.Context, user *user_domain.User) (*mongo.UpdateResult, error) {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for UpdateVerifyForChangePassword")
	}

	var r0 *mongo.UpdateResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *user_domain.User) (*mongo.UpdateResult, error)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *user_domain.User) *mongo.UpdateResult); ok {
		r0 = rf(ctx, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.UpdateResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *user_domain.User) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpsertUser provides a mock function with given fields: ctx, email, user
func (_m *IUserUseCase) UpsertUser(ctx context.Context, email string, user *user_domain.User) (*user_domain.User, error) {
	ret := _m.Called(ctx, email, user)

	if len(ret) == 0 {
		panic("no return value specified for UpsertUser")
	}

	var r0 *user_domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *user_domain.User) (*user_domain.User, error)); ok {
		return rf(ctx, email, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *user_domain.User) *user_domain.User); ok {
		r0 = rf(ctx, email, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user_domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *user_domain.User) error); ok {
		r1 = rf(ctx, email, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIUserUseCase creates a new instance of IUserUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIUserUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *IUserUseCase {
	mock := &IUserUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
