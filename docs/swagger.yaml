basePath: /api/v1
definitions:
  attendance_domain.Input:
    properties:
      check_in_time:
        type: string
      check_out_time:
        type: string
      date:
        type: string
      employee:
        type: string
      status:
        description: 'Example values: "Present", "Leave", "Sick"'
        type: string
    type: object
  benefits_domain.Input:
    properties:
      amount:
        type: number
      benefit_type:
        description: 'Example: "Health Insurance", "Social Insurance", "Meal Allowance"'
        type: string
      employee_email:
        type: string
      end_date:
        type: string
      start_date:
        type: string
    type: object
  employees_domain.Input:
    properties:
      address:
        example: Bình Thuận
        type: string
      avatarURL:
        type: string
      dateOfBirth:
        example: 01/01/2002
        type: string
      dayOfWork:
        example: 30/8/2024
        type: string
      department:
        example: marketing
        type: string
      email:
        example: hoaiphong01012002@gmail.com
        type: string
      firstName:
        example: Ngô
        type: string
      gender:
        example: Nam
        type: string
      lastName:
        example: Hoài Phong
        type: string
      phone:
        example: "0329245971"
        type: string
      role:
        example: developer
        type: string
    type: object
  role_domain.Input:
    properties:
      description:
        example: The admin role has full access and control over the system.
        type: string
      title:
        example: Admin
        type: string
    type: object
  salary_domain.Salary:
    properties:
      base_salary:
        type: number
      bonus:
        type: number
      created_at:
        type: string
      deductions:
        type: number
      id:
        type: string
      net_salary:
        type: number
      role_id:
        type: string
      unit_currency:
        type: string
      updated_at:
        type: string
    type: object
  user_domain.SignIn:
    properties:
      email:
        example: admin@admin.com
        type: string
      password:
        example: "12345"
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: hoaiphong01012002@gmail.com
    name: API Support
  description: This is a server for Kuro API
  title: Shop E-commerce ERP
  version: "1.0"
paths:
  /api/v1/attendances/{_id}:
    delete:
      description: Deletes the attendance's information by ID
      parameters:
      - description: Attendance ID
        in: path
        name: _id
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      security:
      - CookieAuth: []
      summary: Delete Attendance Information
      tags:
      - Attendance
    patch:
      description: Updates the attendance's information
      parameters:
      - description: Attendance ID
        in: path
        name: _id
        required: true
        type: string
      - description: Attendance data
        in: body
        name: attendance
        required: true
        schema:
          $ref: '#/definitions/attendance_domain.Input'
      produces:
      - application/json
      responses: {}
      security:
      - CookieAuth: []
      summary: Update Attendance Information
      tags:
      - Attendance
  /api/v1/attendances/create:
    post:
      consumes:
      - application/json
      description: Create the attendance's information
      parameters:
      - description: Attendance data
        in: body
        name: LoginUserRequestDto
        required: true
        schema:
          $ref: '#/definitions/attendance_domain.Input'
      produces:
      - application/json
      responses: {}
      security:
      - CookieAuth: []
      summary: Create Attendance Information
      tags:
      - Attendance
  /api/v1/attendances/get/all:
    get:
      consumes:
      - application/json
      description: Retrieves the attendance's information
      produces:
      - application/json
      responses: {}
      security:
      - CookieAuth: []
      summary: Get Attendance Information
      tags:
      - Attendance
  /api/v1/attendances/get/one/_id:
    get:
      consumes:
      - application/json
      description: Retrieves the attendance's information name
      parameters:
      - description: Attendance ID
        in: path
        name: _id
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      security:
      - CookieAuth: []
      summary: Get Attendance Information By ID
      tags:
      - Attendance
  /api/v1/attendances/get/one/email:
    get:
      description: Retrieves the attendance's information name
      parameters:
      - description: Attendance ID
        in: path
        name: email
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      security:
      - CookieAuth: []
      summary: Get Attendance Information By ID
      tags:
      - Attendance
  /api/v1/benefits/{_id}:
    delete:
      description: Deletes the benefit's information by ID
      parameters:
      - description: Benefit ID
        in: path
        name: _id
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      security:
      - CookieAuth: []
      summary: Delete Benefit Information
      tags:
      - Benefit
    patch:
      description: Updates the benefit's information
      parameters:
      - description: Benefit ID
        in: path
        name: _id
        required: true
        type: string
      - description: Benefit data
        in: body
        name: attendance
        required: true
        schema:
          $ref: '#/definitions/benefits_domain.Input'
      produces:
      - application/json
      responses: {}
      security:
      - CookieAuth: []
      summary: Update Benefit Information
      tags:
      - Benefit
  /api/v1/benefits/create:
    post:
      consumes:
      - application/json
      description: Create the benefit's information
      parameters:
      - description: Benefit data
        in: body
        name: Benefit
        required: true
        schema:
          $ref: '#/definitions/benefits_domain.Input'
      produces:
      - application/json
      responses: {}
      security:
      - CookieAuth: []
      summary: Create Benefit Information
      tags:
      - Benefit
  /api/v1/benefits/get/all:
    get:
      consumes:
      - application/json
      description: Retrieves the benefit's information
      produces:
      - application/json
      responses: {}
      security:
      - CookieAuth: []
      summary: Get Benefit Information
      tags:
      - Benefit
  /api/v1/benefits/get/one/_id:
    get:
      consumes:
      - application/json
      description: Retrieves the benefit's information name
      parameters:
      - description: Benefit ID
        in: path
        name: _id
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      security:
      - CookieAuth: []
      summary: Get Benefit Information By ID
      tags:
      - Benefit
  /api/v1/benefits/get/one/email:
    get:
      description: Retrieves the benefit's information name
      parameters:
      - description: Benefit ID
        in: path
        name: email
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      security:
      - CookieAuth: []
      summary: Get Benefit Information By ID
      tags:
      - Benefit
  /api/v1/departments/create:
    post:
      consumes:
      - application/json
      description: Create the department's information
      produces:
      - application/json
      responses: {}
      security:
      - CookieAuth: []
      summary: Create Department Information
      tags:
      - Department
  /api/v1/departments/delete:
    delete:
      consumes:
      - application/json
      description: Deletes the department's information
      produces:
      - application/json
      responses: {}
      security:
      - CookieAuth: []
      summary: Delete Department Information
      tags:
      - Department
  /api/v1/departments/get/all:
    get:
      consumes:
      - application/json
      description: Retrieves the department's information
      produces:
      - application/json
      responses: {}
      security:
      - CookieAuth: []
      summary: Get Department Information
      tags:
      - Department
  /api/v1/departments/get/one/_id:
    get:
      consumes:
      - application/json
      description: Retrieves the department's information name
      produces:
      - application/json
      responses: {}
      security:
      - CookieAuth: []
      summary: Get Department Information By ID
      tags:
      - Department
  /api/v1/departments/get/one/name:
    get:
      consumes:
      - application/json
      description: Retrieves the department's information name
      produces:
      - application/json
      responses: {}
      security:
      - CookieAuth: []
      summary: Get Department Information By Name
      tags:
      - Department
  /api/v1/departments/update:
    patch:
      consumes:
      - application/json
      description: Updates the department's information
      produces:
      - application/json
      responses: {}
      security:
      - CookieAuth: []
      summary: Update Department Information
      tags:
      - Department
  /api/v1/employees/create:
    post:
      consumes:
      - application/json
      description: Create the employee's information
      parameters:
      - description: Employee data
        in: body
        name: attendance
        required: true
        schema:
          $ref: '#/definitions/employees_domain.Input'
      produces:
      - application/json
      responses: {}
      security:
      - CookieAuth: []
      summary: Create Employee Information
      tags:
      - Employee
  /api/v1/employees/delete:
    delete:
      description: Deletes the employee's information
      parameters:
      - description: Employee ID
        in: path
        name: _id
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      security:
      - CookieAuth: []
      summary: Delete Employee Information
      tags:
      - Employee
  /api/v1/employees/get/_id:
    get:
      description: Retrieves the employee's information
      parameters:
      - description: Employee ID
        in: path
        name: _id
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      security:
      - CookieAuth: []
      summary: Get Employee Information
      tags:
      - Employee
  /api/v1/employees/get/all:
    get:
      consumes:
      - application/json
      description: Retrieves the employee's information
      produces:
      - application/json
      responses: {}
      security:
      - CookieAuth: []
      summary: Get Employee Information
      tags:
      - Employee
  /api/v1/employees/get/name:
    get:
      description: Retrieves the employee's information
      parameters:
      - description: Employee
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      security:
      - CookieAuth: []
      summary: Get Employee Information
      tags:
      - Employee
  /api/v1/employees/update:
    put:
      description: Create the employee's information
      parameters:
      - description: Employee ID
        in: path
        name: _id
        required: true
        type: string
      - description: Employee data
        in: body
        name: attendance
        required: true
        schema:
          $ref: '#/definitions/employees_domain.Input'
      produces:
      - application/json
      responses: {}
      security:
      - CookieAuth: []
      summary: Create Employee Information
      tags:
      - Employee
  /api/v1/roles/create:
    post:
      consumes:
      - application/json
      description: Create new role
      parameters:
      - description: Role data
        in: body
        name: Role
        required: true
        schema:
          $ref: '#/definitions/role_domain.Input'
      produces:
      - application/json
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: Create role
      tags:
      - Role
  /api/v1/roles/delete:
    delete:
      consumes:
      - application/json
      description: Deletes the role's information
      produces:
      - application/json
      responses: {}
      security:
      - CookieAuth: []
      summary: Delete Role Information
      tags:
      - Role
  /api/v1/roles/get/all:
    get:
      consumes:
      - application/json
      description: Retrieves the role's information
      produces:
      - application/json
      responses: {}
      security:
      - CookieAuth: []
      summary: Get Role Information
      tags:
      - Role
  /api/v1/roles/get/one/_id:
    get:
      consumes:
      - application/json
      description: Retrieves the role's information name
      produces:
      - application/json
      responses: {}
      security:
      - CookieAuth: []
      summary: Get Role Information By Name
      tags:
      - Role
  /api/v1/roles/get/one/title:
    get:
      consumes:
      - application/json
      description: Retrieves the role's information name
      produces:
      - application/json
      responses: {}
      security:
      - CookieAuth: []
      summary: Get Role Information By Name
      tags:
      - Role
  /api/v1/roles/update:
    patch:
      consumes:
      - application/json
      description: Updates the role's information
      produces:
      - application/json
      responses: {}
      security:
      - CookieAuth: []
      summary: Update Role Information
      tags:
      - Role
  /api/v1/salaries/create:
    post:
      consumes:
      - application/json
      description: Create new salary
      parameters:
      - description: Salary data
        in: body
        name: Role
        required: true
        schema:
          $ref: '#/definitions/salary_domain.Salary'
      produces:
      - application/json
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: Create salary
      tags:
      - Salary
  /api/v1/salaries/delete:
    delete:
      consumes:
      - application/json
      description: Deletes the salary's information
      produces:
      - application/json
      responses: {}
      security:
      - CookieAuth: []
      summary: Delete Salary Information
      tags:
      - Salary
  /api/v1/salaries/get/all:
    get:
      consumes:
      - application/json
      description: Retrieves the salary's information
      produces:
      - application/json
      responses: {}
      security:
      - CookieAuth: []
      summary: Get Salary Information
      tags:
      - Salary
  /api/v1/salaries/get/one/_id:
    get:
      consumes:
      - application/json
      description: Retrieves the salary's information id
      produces:
      - application/json
      responses: {}
      security:
      - CookieAuth: []
      summary: Get Salary Information By ID
      tags:
      - Salary
  /api/v1/salaries/get/one/role:
    get:
      consumes:
      - application/json
      description: Retrieves the salary's information role
      produces:
      - application/json
      responses: {}
      security:
      - CookieAuth: []
      summary: Get Salary Information By Role
      tags:
      - Salary
  /api/v1/salaries/update:
    patch:
      consumes:
      - application/json
      description: Updates the salary's information
      produces:
      - application/json
      responses: {}
      security:
      - CookieAuth: []
      summary: Update Salary Information
      tags:
      - Salary
  /api/v1/users/delete:
    delete:
      consumes:
      - application/json
      description: Deletes the user's information
      produces:
      - application/json
      responses: {}
      security:
      - CookieAuth: []
      summary: Delete User Information
      tags:
      - User
  /api/v1/users/get/info:
    get:
      consumes:
      - application/json
      description: Retrieves the user's information using the access token stored
        in cookies.
      produces:
      - application/json
      responses: {}
      security:
      - CookieAuth: []
      summary: Get User Information
      tags:
      - User
  /api/v1/users/get/logout:
    get:
      consumes:
      - application/json
      description: Logout the current user
      produces:
      - application/json
      responses: {}
      summary: Logout user
      tags:
      - User
  /api/v1/users/get/refresh:
    get:
      consumes:
      - application/json
      description: Refresh the user's access token using a valid refresh token stored
        in cookies.
      produces:
      - application/json
      responses: {}
      security:
      - CookieAuth: []
      summary: Refresh Access Token
      tags:
      - User
  /api/v1/users/login:
    post:
      consumes:
      - application/json
      description: Login user
      parameters:
      - description: User data
        in: body
        name: LoginUserRequestDto
        required: true
        schema:
          $ref: '#/definitions/user_domain.SignIn'
      produces:
      - application/json
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: Login user
      tags:
      - User
  /api/v1/users/register:
    post:
      consumes:
      - application/x-www-form-urlencoded
      - multipart/form-data
      description: Register a new user with form data
      parameters:
      - description: Email of the user
        example: '"john.doe@example.com"'
        in: formData
        name: email
        required: true
        type: string
      - description: Password of the user
        example: '"securepassword123"'
        in: formData
        name: password
        required: true
        type: string
      - description: Full name of the user
        example: '"John Doe"'
        in: formData
        name: fullName
        required: true
        type: string
      - description: Avatar URL of the user
        example: '"http://example.com/avatar.jpg"'
        in: formData
        name: avatarUrl
        required: true
        type: string
      - description: Image file to upload
        in: formData
        name: file
        required: true
        type: file
      - description: Phone number of the user
        example: '"+1234567890"'
        in: formData
        name: phone
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: Register user
      tags:
      - User
  /api/v1/users/update:
    patch:
      consumes:
      - application/json
      description: Updates the user's first name, last name, and username
      produces:
      - application/json
      responses: {}
      security:
      - CookieAuth: []
      summary: Update User Information
      tags:
      - User
swagger: "2.0"
